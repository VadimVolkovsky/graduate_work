services:
  auth-api:
    image: auth_api_image
    build: .
    restart: always
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - "8000:8000"
    command: gunicorn src.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 #--bind $SERVICE_HOST:$SERVICE_PORT
    depends_on:
      auth_redis:
        condition: service_healthy
      auth_postgres:
        condition: service_healthy
    networks:
      - cdn_network
    container_name: 'auth-api'

  auth_postgres:
    image: postgres:16.0
#    ports:
#      - "0:5432"
    volumes:
      - postgres_data_auth:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=123qwe
      - POSTGRES_USER=app
      - POSTGRES_DB=auth_database
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB} -p 5432" ]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - cdn_network
    container_name: 'auth_postgres'

  auth_redis:
    image: redis:7-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
    env_file:
      - .env
    ports:
      - 0:6379
    networks:
      - cdn_network
    container_name: 'auth_redis'

#  auth_nginx:
#    image: nginx:1.25.3
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/configs:/etc/nginx/conf.d:ro
#    depends_on:
#      - auth_api
#    ports:
#      - "80:80"
#    networks:
#      - auth_network
#    container_name: 'auth_nginx'

volumes:
  postgres_data_auth:
  redis_data:

#networks:
#  auth_network:
#    driver: bridge
